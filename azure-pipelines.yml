# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- main

pool:
  vmImage: 'ubuntu-latest'

variables:
  subscription: Visual Studio Enterprise(5af9f377-83c8-4ec8-8520-953f65104850)
  resourceGroup: storage_terraform_rg_habiib
  storageAccount: storageacc017
  container: my-files
  anyTfChanges: false

steps:

- task: TerraformInstaller@0
  displayName: install Terraform v0.12.28
  inputs:
    terraformVersion: '0.12.28'

- task: TerraformTaskV1@0
  displayName: terraform init
  inputs:
    provider: 'azurerm'
    command: 'init'
    workingDirectory: '$(System.DefaultWorkingDirectory)/skip-step'
    backendServiceArm: '$(subscription)'
    backendAzureRmResourceGroupName: '$(resourceGroup)'
    backendAzureRmStorageAccountName: '$(storageAccount)'
    backendAzureRmContainerName: '$(container)'

- task: TerraformTaskV1@0
  displayName: terraform plan -out=tfplan
  inputs:
    provider: 'azurerm'
    command: 'plan'
    workingDirectory: '$(System.DefaultWorkingDirectory)/skip-step'
    commandOptions: '-out=tfplan'
    # commandOptions: '-detailed-exitcode -out=tfplan'
    environmentServiceNameAzureRM: '$(subscription)'



- task: TerraformTaskV1@0
  displayName: terraform apply tfplan
  condition: eq(variables.anyTfChanges,Â true)
  inputs:
    provider: 'azurerm'
    command: 'apply'
    workingDirectory: '$(System.DefaultWorkingDirectory)/skip-step'
    commandOptions: 'tfplan'
    environmentServiceNameAzureRM: '$(subscription)'
